package ${helperPackage};

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.support.v4.content.ContextCompat;

import java.util.ArrayList;

/**
 * Helper class for Permissions Management (API >= 23).
 *
 * This class contains a static list of the dangerous permissions declared in the Android Manifest, plus
 * a set of static functions to help with the task of checking which were granted or not.
 *
 * @author android-permissions-gradle-plugin
 */
@SuppressWarnings("unused")
public class PermissionsHelper {
<% permissions.each { %>
    public static final String <%= it %> = Manifest.permission.<%= it %>;<%  } %>
    public static final String [] REQUIRED_PERMISSIONS = { <% permissions.eachWithIndex { item, index -> %>
        <%= item %><%= index < permissions.size()-1 ? "," : "" %><% } %>
    };

    /**
     * Checks if a permission was granted bu the user
     *
     * @param context Android context
     * @param permission to verify
     * @return true if the permission was granted by the user
     */
    public static boolean granted(Context context, String permission) {
        return ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;
    }

    /**
     * Checks if the dangerous permissions declared in the Manifest were granted by the user
     *
     * @param context Android context
     * @param permissions to verify
     * @return true if all the permissions were granted by the user
     */
    public static boolean granted(Context context, String [] permissions) {
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_DENIED)
                return false;
        }
        return true;
    }

    /**
     * Checks if the dangerous permissions declared in the Manifest were granted by the user
     *
     * @param context Android context
     * @return true if all the permissions were granted by the user
     */
    public static boolean granted(Context context) {
        for (String permission : REQUIRED_PERMISSIONS) {
            if (ContextCompat.checkSelfPermission(context, permission) == PackageManager.PERMISSION_DENIED)
                return false;
        }
        return true;
    }

    /**
     * Returns the permissions that granted by the user from a set of permissions
     *
     * @param context Android context
     * @param permissions to verify
     * @return list of granted permissions
     */
    public static String [] filterGranted(Context context, String [] permissions) {
        ArrayList<String> permitted = new ArrayList<>();
        for (String permission : permissions) {
            if (granted(context, permission)) permitted.add(permission);
        }
        return permitted.toArray(new String [permitted.size()]);
    }

    /**
     * Returns the permissions that granted by the user from the dangerous permissions declared in the Manifest
     *
     * @param context Android context
     * @return list of granted permissions
     */
     public static String [] filterGranted(Context context) {
         ArrayList<String> permitted = new ArrayList<>();
         for (String permission : REQUIRED_PERMISSIONS) {
             if (granted(context, permission)) permitted.add(permission);
         }
         return permitted.toArray(new String [permitted.size()]);
     }

    /**
     * Returns the permissions that were not granted by the user from a set of permissions
     *
     * @param context Android context
     * @param permissions to verify
     * @return list of not granted permissions
     */
    public static String [] filterNotGranted(Context context, String [] permissions) {
        ArrayList<String> nonPermitted = new ArrayList<>();
        for (String permission : permissions) {
            if (!granted(context, permission)) nonPermitted.add(permission);
        }
        return nonPermitted.toArray(new String [nonPermitted.size()]);
    }

    /**
     * Returns the permissions that were not granted by the user from the dangerous permissions declared in the Manifest
     *
     * @param context Android context
     * @return list of not granted permissions
     */
    public static String [] filterNotGranted(Context context) {
        ArrayList<String> nonPermitted = new ArrayList<>();
        for (String permission : REQUIRED_PERMISSIONS) {
            if (!granted(context, permission)) nonPermitted.add(permission);
        }
        return nonPermitted.toArray(new String [nonPermitted.size()]);
    }
}
